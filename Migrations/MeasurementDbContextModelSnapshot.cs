// <auto-generated />
using System;
using Assignment1RM.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assignment1RM.Migrations
{
    [DbContext(typeof(MeasurementDbContext))]
    partial class MeasurementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Assignment1RM.Entities.Measurement", b =>
                {
                    b.Property<int>("MeasurementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeasurementId"), 1L, 1);

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Diastolic")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("PositionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Systolic")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("MeasurementId");

                    b.HasIndex("PositionId");

                    b.ToTable("Measurements");

                    b.HasData(
                        new
                        {
                            MeasurementId = 1,
                            Date = "10/02/2023",
                            Diastolic = 80,
                            PositionId = "ST",
                            Systolic = 120
                        },
                        new
                        {
                            MeasurementId = 2,
                            Date = "10/02/2023",
                            Diastolic = 80,
                            PositionId = "SI",
                            Systolic = 120
                        });
                });

            modelBuilder.Entity("Assignment1RM.Entities.Position", b =>
                {
                    b.Property<string>("PositionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PositionId");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            PositionId = "ST",
                            Name = "Standing"
                        },
                        new
                        {
                            PositionId = "LD",
                            Name = "Lying Down"
                        },
                        new
                        {
                            PositionId = "SI",
                            Name = "Sitting"
                        });
                });

            modelBuilder.Entity("Assignment1RM.Entities.Measurement", b =>
                {
                    b.HasOne("Assignment1RM.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });
#pragma warning restore 612, 618
        }
    }
}
